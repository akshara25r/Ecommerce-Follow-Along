"use strict";
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* eslint-disable @typescript-eslint/no-dynamic-delete */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable fp/no-delete */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.disablePlugins = exports.extractConfig = void 0;
const eslintrc_1 = require("@eslint/eslintrc");
const clone_deep_1 = __importDefault(require("clone-deep"));
const extractConfig = (baseConfig) => {
    const factory = new eslintrc_1.Legacy.ConfigArrayFactory();
    return factory
        .create(baseConfig)
        .extractConfig()
        .toCompatibleObjectAsConfigFileContent();
};
exports.extractConfig = extractConfig;
const disablePlugins = (eslintConfig, pluginNames) => {
    const nextEslintConfig = clone_deep_1.default(eslintConfig);
    nextEslintConfig.plugins = nextEslintConfig.plugins.filter((pluginName) => {
        return !pluginNames.includes(pluginName);
    });
    for (const pluginName of pluginNames) {
        for (const [key] of Object.entries(nextEslintConfig.rules)) {
            if (key.startsWith(pluginName + '/')) {
                delete nextEslintConfig.rules[key];
            }
        }
    }
    return nextEslintConfig;
};
exports.disablePlugins = disablePlugins;
